//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DB_BureauExpertiseAndEvaluation
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Бюро_экспертизы_и_оценкиEntities : DbContext
    {
        public Бюро_экспертизы_и_оценкиEntities()
            : base("name=Бюро_экспертизы_и_оценкиEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Квитанция> Квитанция { get; set; }
        public virtual DbSet<Клиенты> Клиенты { get; set; }
        public virtual DbSet<Накладная> Накладная { get; set; }
        public virtual DbSet<Недвижимость> Недвижимость { get; set; }
        public virtual DbSet<Объекты_экспертизы> Объекты_экспертизы { get; set; }
        public virtual DbSet<Отдел> Отдел { get; set; }
        public virtual DbSet<Паспорта> Паспорта { get; set; }
        public virtual DbSet<Сотрудники> Сотрудники { get; set; }
        public virtual DbSet<Техника> Техника { get; set; }
        public virtual DbSet<Экспертиза_и_оценка> Экспертиза_и_оценка { get; set; }
    
        public virtual ObjectResult<Накладная> procEditNaklad(Nullable<int> series, Nullable<int> nomer)
        {
            var seriesParameter = series.HasValue ?
                new ObjectParameter("Series", series) :
                new ObjectParameter("Series", typeof(int));
    
            var nomerParameter = nomer.HasValue ?
                new ObjectParameter("Nomer", nomer) :
                new ObjectParameter("Nomer", typeof(int));
    
            
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Накладная>("procEditNaklad", seriesParameter, nomerParameter);
        }
    
        public virtual ObjectResult<Накладная> procEditNaklad(Nullable<int> series, Nullable<int> nomer, MergeOption mergeOption)
        {
            var seriesParameter = series.HasValue ?
                new ObjectParameter("Series", series) :
                new ObjectParameter("Series", typeof(int));
    
            var nomerParameter = nomer.HasValue ?
                new ObjectParameter("Nomer", nomer) :
                new ObjectParameter("Nomer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Накладная>("procEditNaklad", mergeOption, seriesParameter, nomerParameter);
        }
    
        [DbFunction("Бюро_экспертизы_и_оценкиEntities", "funcZarplata")]
        public virtual IQueryable<funcZarplata_ResultF> funcZarplata(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<funcZarplata_ResultF>("[Бюро_экспертизы_и_оценкиEntities].[funcZarplata](@Id)", idParameter);
        }
    
        [DbFunction("Бюро_экспертизы_и_оценкиEntities", "funcProgDohod")]
        public virtual IQueryable<funcProgDohod_Result> funcProgDohod(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<funcProgDohod_Result>("[Бюро_экспертизы_и_оценкиEntities].[funcProgDohod](@date1, @date2)", date1Parameter, date2Parameter);
        }
    }
}
